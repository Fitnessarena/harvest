{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useState } from \"react\";\nimport { signInAsync } from \"../services/api.service\";\nimport { KeyboardAwareScrollView } from 'react-native-keyboard-aware-scroll-view';\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport { useFonts, Montserrat_400Regular } from \"@expo-google-fonts/montserrat\";\nimport AppLoading from \"expo-app-loading\";\n\nvar LoginPage = function LoginPage(_ref) {\n  var navigation = _ref.navigation;\n\n  var _React$useState = React.useState(\"Guest\"),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      username = _React$useState2[0],\n      setUsername = _React$useState2[1];\n\n  var _useState = useState(\"\"),\n      _useState2 = _slicedToArray(_useState, 2),\n      password = _useState2[0],\n      setPassword = _useState2[1];\n\n  var _useState3 = useState(\"\"),\n      _useState4 = _slicedToArray(_useState3, 2),\n      status = _useState4[0],\n      setStatus = _useState4[1];\n\n  function login() {\n    return _regeneratorRuntime.async(function login$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!(username.length <= 0)) {\n              _context.next = 3;\n              break;\n            }\n\n            Alert.alert(\"You must enter a username\");\n            return _context.abrupt(\"return\");\n\n          case 3:\n            if (!(password.length <= 0)) {\n              _context.next = 6;\n              break;\n            }\n\n            Alert.alert(\"You must enter a password\");\n            return _context.abrupt(\"return\");\n\n          case 6:\n            setStatus('Authenticating ..');\n            signInAsync(username, password).then(function () {\n              console.log('Login successful');\n              navigation.reset({\n                index: 0,\n                routes: [{\n                  name: 'AfterLogin'\n                }]\n              });\n            }).catch(function (error) {\n              if (error.code === 'auth/email-already-in-use') {\n                console.log('Sorry, this email is already in use');\n              }\n\n              if (error.code === 'auth/invalid-email') {\n                console.log('Invalid Email address');\n              }\n\n              console.error(error);\n              Alert.alert(\"\" + error);\n            });\n\n          case 8:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n\n  var _useFonts = useFonts({\n    Montserrat_400Regular: Montserrat_400Regular\n  }),\n      _useFonts2 = _slicedToArray(_useFonts, 2),\n      fontsLoaded = _useFonts2[0],\n      error = _useFonts2[1];\n\n  if (!fontsLoaded) {\n    return React.createElement(AppLoading, null);\n  }\n\n  return React.createElement(SafeAreaView, {\n    style: styles.wrapper\n  }, React.createElement(KeyboardAwareScrollView, null, React.createElement(View, {\n    style: styles.topBox\n  }, React.createElement(Image, {\n    style: styles.iconStyle,\n    source: require(\"./assets/placeholder_logo.png\")\n  }), React.createElement(Text, {\n    style: styles.textStyle\n  }, \"Login to Harvest\")), React.createElement(View, {\n    style: styles.bottomBox\n  }, React.createElement(Text, {\n    style: styles.UserPasswordText\n  }, \"Username\"), React.createElement(TextInput, {\n    style: styles.input,\n    placeholder: \"username\",\n    onChangeText: function onChangeText(text) {\n      return setUsername(text);\n    },\n    value: username,\n    autoCapitalize: \"none\"\n  }), React.createElement(Text, {\n    style: styles.UserPasswordText\n  }, \"Password\"), React.createElement(TextInput, {\n    style: styles.input,\n    secureTextEntry: true,\n    onChangeText: function onChangeText(text) {\n      return setPassword(text);\n    },\n    placeholder: \"password\"\n  }), React.createElement(View, {\n    style: styles.navButtonsWrapper\n  }, React.createElement(TouchableOpacity, {\n    style: styles.buttonStyle,\n    onPress: function onPress() {\n      login();\n    }\n  }, React.createElement(Text, {\n    style: styles.buttonFont\n  }, \"Login\"))))));\n};\n\nvar styles = StyleSheet.create({\n  wrapper: {\n    flex: 1\n  },\n  topBox: {\n    flex: 3,\n    justifyContent: \"space-evenly\",\n    alignItems: \"center\",\n    padding: 50\n  },\n  bottomBox: {\n    flex: 2,\n    justifyContent: \"flex-end\",\n    padding: 50\n  },\n  navButtonsWrapper: {\n    height: 100\n  },\n  iconStyle: {\n    width: 150,\n    height: 150\n  },\n  buttonStyle: {\n    backgroundColor: \"black\",\n    padding: 10,\n    alignItems: \"center\",\n    marginBottom: 25,\n    marginTop: 25\n  },\n  buttonFont: {\n    color: \"white\"\n  },\n  textStyle: {\n    fontSize: 32,\n    fontFamily: \"\"\n  },\n  UserPasswordText: {\n    fontFamily: \"Montserrat_400Regular\",\n    fontSize: 20,\n    margin: 12\n  },\n  input: {\n    height: 40,\n    margin: 12,\n    borderWidth: 1,\n    padding: 10\n  }\n});\nexport default LoginPage;","map":{"version":3,"sources":["C:/Users/tomch/OneDrive/Documents/GitHub/harvest/screens/LoginPage.tsx"],"names":["React","useState","signInAsync","KeyboardAwareScrollView","useFonts","Montserrat_400Regular","AppLoading","LoginPage","navigation","username","setUsername","password","setPassword","status","setStatus","login","length","Alert","alert","then","console","log","reset","index","routes","name","catch","error","code","fontsLoaded","styles","wrapper","topBox","iconStyle","require","textStyle","bottomBox","UserPasswordText","input","text","navButtonsWrapper","buttonStyle","buttonFont","StyleSheet","create","flex","justifyContent","alignItems","padding","height","width","backgroundColor","marginBottom","marginTop","color","fontSize","fontFamily","margin","borderWidth"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAAgBC,WAAhB;AACA,SAASC,uBAAT,QAAwC,yCAAxC;;;;;;;;;AAeA,SAASC,QAAT,EAAmBC,qBAAnB,QAAgD,+BAAhD;AACA,OAAOC,UAAP,MAAuB,kBAAvB;;AAEA,IAAMC,SAAS,GAAG,SAAZA,SAAY,OAAyC;AAAA,MAAtCC,UAAsC,QAAtCA,UAAsC;;AACzD,wBAAgCR,KAAK,CAACC,QAAN,CAAe,OAAf,CAAhC;AAAA;AAAA,MAAOQ,QAAP;AAAA,MAAiBC,WAAjB;;AACA,kBAAgCT,QAAQ,CAAC,EAAD,CAAxC;AAAA;AAAA,MAAOU,QAAP;AAAA,MAAiBC,WAAjB;;AACA,mBAA4BX,QAAQ,CAAC,EAAD,CAApC;AAAA;AAAA,MAAOY,MAAP;AAAA,MAAeC,SAAf;;AAEF,WAAeC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA,kBACMN,QAAQ,CAACO,MAAT,IAAmB,CADzB;AAAA;AAAA;AAAA;;AAEIC,YAAAA,KAAK,CAACC,KAAN,CAAY,2BAAZ;AAFJ;;AAAA;AAAA,kBAKMP,QAAQ,CAACK,MAAT,IAAmB,CALzB;AAAA;AAAA;AAAA;;AAMIC,YAAAA,KAAK,CAACC,KAAN,CAAY,2BAAZ;AANJ;;AAAA;AAUEJ,YAAAA,SAAS,CAAC,mBAAD,CAAT;AACEZ,YAAAA,WAAW,CAACO,QAAD,EAAWE,QAAX,CAAX,CACGQ,IADH,CACQ,YAAM;AACVC,cAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ;AACAb,cAAAA,UAAU,CAACc,KAAX,CAAiB;AACfC,gBAAAA,KAAK,EAAE,CADQ;AAEfC,gBAAAA,MAAM,EAAE,CAAC;AAACC,kBAAAA,IAAI,EAAE;AAAP,iBAAD;AAFO,eAAjB;AAID,aAPH,EAQGC,KARH,CAQS,UAAAC,KAAK,EAAI;AACd,kBAAIA,KAAK,CAACC,IAAN,KAAe,2BAAnB,EAAgD;AAC9CR,gBAAAA,OAAO,CAACC,GAAR,CAAY,qCAAZ;AACD;;AAED,kBAAIM,KAAK,CAACC,IAAN,KAAe,oBAAnB,EAAyC;AACvCR,gBAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ;AACD;;AAEDD,cAAAA,OAAO,CAACO,KAAR,CAAcA,KAAd;AACAV,cAAAA,KAAK,CAACC,KAAN,MAAeS,KAAf;AACD,aAnBH;;AAXJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAmCE,kBAA2BvB,QAAQ,CAAC;AAClCC,IAAAA,qBAAqB,EAArBA;AADkC,GAAD,CAAnC;AAAA;AAAA,MAAKwB,WAAL;AAAA,MAAkBF,KAAlB;;AAIA,MAAI,CAACE,WAAL,EAAkB;AAChB,WAAO,oBAAC,UAAD,OAAP;AACD;;AAED,SACE,oBAAC,YAAD;AAAc,IAAA,KAAK,EAAEC,MAAM,CAACC;AAA5B,KACE,oBAAC,uBAAD,QACA,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAED,MAAM,CAACE;AAApB,KACE,oBAAC,KAAD;AACE,IAAA,KAAK,EAAEF,MAAM,CAACG,SADhB;AAEE,IAAA,MAAM,EAAEC,OAAO;AAFjB,IADF,EAKE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEJ,MAAM,CAACK;AAApB,wBALF,CADA,EASA,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEL,MAAM,CAACM;AAApB,KACE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEN,MAAM,CAACO;AAApB,gBADF,EAEE,oBAAC,SAAD;AACE,IAAA,KAAK,EAAEP,MAAM,CAACQ,KADhB;AAEE,IAAA,WAAW,EAAC,UAFd;AAGE,IAAA,YAAY,EAAE,sBAACC,IAAD;AAAA,aAAU7B,WAAW,CAAC6B,IAAD,CAArB;AAAA,KAHhB;AAIE,IAAA,KAAK,EAAE9B,QAJT;AAKE,IAAA,cAAc,EAAC;AALjB,IAFF,EAUE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEqB,MAAM,CAACO;AAApB,gBAVF,EAWE,oBAAC,SAAD;AACE,IAAA,KAAK,EAAEP,MAAM,CAACQ,KADhB;AAEE,IAAA,eAAe,EAAE,IAFnB;AAGE,IAAA,YAAY,EAAE,sBAACC,IAAD;AAAA,aAAU3B,WAAW,CAAC2B,IAAD,CAArB;AAAA,KAHhB;AAIE,IAAA,WAAW,EAAC;AAJd,IAXF,EAiBE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAET,MAAM,CAACU;AAApB,KACE,oBAAC,gBAAD;AACE,IAAA,KAAK,EAAEV,MAAM,CAACW,WADhB;AAEE,IAAA,OAAO,EAAE,mBAAM;AACb1B,MAAAA,KAAK;AAMN;AATH,KAWE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEe,MAAM,CAACY;AAApB,aAXF,CADF,CAjBF,CATA,CADF,CADF;AA+CD,CA/FD;;AAiGA,IAAMZ,MAAM,GAAGa,UAAU,CAACC,MAAX,CAAkB;AAC/Bb,EAAAA,OAAO,EAAE;AACPc,IAAAA,IAAI,EAAE;AADC,GADsB;AAI/Bb,EAAAA,MAAM,EAAE;AACNa,IAAAA,IAAI,EAAE,CADA;AAENC,IAAAA,cAAc,EAAE,cAFV;AAGNC,IAAAA,UAAU,EAAE,QAHN;AAINC,IAAAA,OAAO,EAAE;AAJH,GAJuB;AAW/BZ,EAAAA,SAAS,EAAE;AACTS,IAAAA,IAAI,EAAE,CADG;AAETC,IAAAA,cAAc,EAAE,UAFP;AAGTE,IAAAA,OAAO,EAAE;AAHA,GAXoB;AAgB/BR,EAAAA,iBAAiB,EAAE;AACjBS,IAAAA,MAAM,EAAE;AADS,GAhBY;AAmB/BhB,EAAAA,SAAS,EAAE;AACTiB,IAAAA,KAAK,EAAE,GADE;AAETD,IAAAA,MAAM,EAAE;AAFC,GAnBoB;AAwB/BR,EAAAA,WAAW,EAAE;AACXU,IAAAA,eAAe,EAAE,OADN;AAEXH,IAAAA,OAAO,EAAE,EAFE;AAGXD,IAAAA,UAAU,EAAE,QAHD;AAIXK,IAAAA,YAAY,EAAE,EAJH;AAKXC,IAAAA,SAAS,EAAE;AALA,GAxBkB;AAgC/BX,EAAAA,UAAU,EAAE;AACVY,IAAAA,KAAK,EAAE;AADG,GAhCmB;AAoC/BnB,EAAAA,SAAS,EAAE;AACToB,IAAAA,QAAQ,EAAE,EADD;AAETC,IAAAA,UAAU,EAAE;AAFH,GApCoB;AAwC/BnB,EAAAA,gBAAgB,EAAE;AAChBmB,IAAAA,UAAU,EAAE,uBADI;AAEhBD,IAAAA,QAAQ,EAAE,EAFM;AAGhBE,IAAAA,MAAM,EAAE;AAHQ,GAxCa;AA6C/BnB,EAAAA,KAAK,EAAE;AACLW,IAAAA,MAAM,EAAE,EADH;AAELQ,IAAAA,MAAM,EAAE,EAFH;AAGLC,IAAAA,WAAW,EAAE,CAHR;AAILV,IAAAA,OAAO,EAAE;AAJJ;AA7CwB,CAAlB,CAAf;AAqDA,eAAezC,SAAf","sourcesContent":["import React, { useState } from \"react\";\r\nimport {signUp, signInAsync} from '../services/api.service';\r\nimport { KeyboardAwareScrollView } from 'react-native-keyboard-aware-scroll-view'\r\n\r\nimport {\r\n  SafeAreaView,\r\n  View,\r\n  FlatList,\r\n  StyleSheet,\r\n  Text,\r\n  Image,\r\n  TextInput,\r\n  StatusBar,\r\n  TouchableOpacity,\r\n  Button,\r\n  Alert,\r\n} from \"react-native\";\r\nimport { useFonts, Montserrat_400Regular } from \"@expo-google-fonts/montserrat\";\r\nimport AppLoading from \"expo-app-loading\";\r\n\r\nconst LoginPage = ({ navigation }: { navigation: any }) => {\r\n  const [username, setUsername] = React.useState(\"Guest\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const [status, setStatus] = useState(\"\");\r\n\r\nasync function login() {\r\n  if (username.length <= 0){\r\n    Alert.alert(\"You must enter a username\");\r\n    return;\r\n  }\r\n  if (password.length <= 0) {\r\n    Alert.alert(\"You must enter a password\");\r\n    return;\r\n  }\r\n\r\n  setStatus('Authenticating ..');\r\n    signInAsync(username, password)\r\n      .then(() => {\r\n        console.log('Login successful');\r\n        navigation.reset({\r\n          index: 0,\r\n          routes: [{name: 'AfterLogin'}],\r\n        });\r\n      })\r\n      .catch(error => {\r\n        if (error.code === 'auth/email-already-in-use') {\r\n          console.log('Sorry, this email is already in use');\r\n        }\r\n\r\n        if (error.code === 'auth/invalid-email') {\r\n          console.log('Invalid Email address');\r\n        }\r\n\r\n        console.error(error);\r\n        Alert.alert(`${error}`);\r\n      });\r\n  }\r\n  \r\n\r\n\r\n  let [fontsLoaded, error] = useFonts({\r\n    Montserrat_400Regular,\r\n  });\r\n\r\n  if (!fontsLoaded) {\r\n    return <AppLoading />;\r\n  }\r\n\r\n  return (\r\n    <SafeAreaView style={styles.wrapper}>\r\n      <KeyboardAwareScrollView>\r\n      <View style={styles.topBox}>\r\n        <Image\r\n          style={styles.iconStyle}\r\n          source={require(\"./assets/placeholder_logo.png\")}\r\n        />\r\n        <Text style={styles.textStyle}>Login to Harvest</Text>\r\n      </View>\r\n\r\n      <View style={styles.bottomBox}>\r\n        <Text style={styles.UserPasswordText}>Username</Text>\r\n        <TextInput\r\n          style={styles.input}\r\n          placeholder=\"username\"\r\n          onChangeText={(text) => setUsername(text)}\r\n          value={username}\r\n          autoCapitalize=\"none\"\r\n        />\r\n\r\n        <Text style={styles.UserPasswordText}>Password</Text>\r\n        <TextInput\r\n          style={styles.input}\r\n          secureTextEntry={true}\r\n          onChangeText={(text) => setPassword(text)}\r\n          placeholder=\"password\"\r\n        />\r\n        <View style={styles.navButtonsWrapper}>\r\n          <TouchableOpacity\r\n            style={styles.buttonStyle}\r\n            onPress={() => {\r\n              login()\r\n              // let profileName = \"Welcome \" + username;\r\n              // navigation.reset({\r\n              //   index: 0,\r\n              //   routes: [{ name: \"AfterLogin\", params: { profileName } }],\r\n              // });\r\n            }}\r\n          >\r\n            <Text style={styles.buttonFont}>Login</Text>\r\n          </TouchableOpacity>\r\n        </View>\r\n      </View>\r\n      </KeyboardAwareScrollView>\r\n    </SafeAreaView>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  wrapper: {\r\n    flex: 1,\r\n  },\r\n  topBox: {\r\n    flex: 3,\r\n    justifyContent: \"space-evenly\",\r\n    alignItems: \"center\",\r\n    padding: 50,\r\n  },\r\n\r\n  bottomBox: {\r\n    flex: 2,\r\n    justifyContent: \"flex-end\",\r\n    padding: 50,\r\n  },\r\n  navButtonsWrapper: {\r\n    height: 100,\r\n  },\r\n  iconStyle: {\r\n    width: 150,\r\n    height: 150,\r\n  },\r\n\r\n  buttonStyle: {\r\n    backgroundColor: \"black\",\r\n    padding: 10,\r\n    alignItems: \"center\",\r\n    marginBottom: 25,\r\n    marginTop: 25,\r\n  },\r\n\r\n  buttonFont: {\r\n    color: \"white\",\r\n  },\r\n\r\n  textStyle: {\r\n    fontSize: 32,\r\n    fontFamily: \"\",\r\n  },\r\n  UserPasswordText: {\r\n    fontFamily: \"Montserrat_400Regular\",\r\n    fontSize: 20,\r\n    margin: 12,\r\n  },\r\n  input: {\r\n    height: 40,\r\n    margin: 12,\r\n    borderWidth: 1,\r\n    padding: 10,\r\n  },\r\n});\r\n\r\nexport default LoginPage;\r\n"]},"metadata":{},"sourceType":"module"}